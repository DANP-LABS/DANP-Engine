# This workflow will build a golang project for multiple platforms
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux, windows, arm, darwin]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Build DANP-MCP-CLIENT
      run: |
        if [ "${{ matrix.platform }}" = "arm" ]; then
          GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X \"main.BuildVersion=${{ github.sha }}\" -X \"main.BuildDate=$(date -u '+%Y-%m-%d %H:%M:%S')\"" -o bin/DANP-MCP-CLIENT-${{ matrix.platform }} ./cmd/DANP-MCP-CLIENT
        else
          GOOS=${{ matrix.platform }} GOARCH=amd64 go build -ldflags "-s -w -X \"main.BuildVersion=${{ github.sha }}\" -X \"main.BuildDate=$(date -u '+%Y-%m-%d %H:%M:%S')\"" -o bin/DANP-MCP-CLIENT-${{ matrix.platform }}${{ matrix.platform == 'windows' && '.exe' || '' }} ./cmd/DANP-MCP-CLIENT
        fi

    - name: Build DANP-MCP-SERVER
      run: |
        if [ "${{ matrix.platform }}" = "arm" ]; then
          GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X \"main.BuildVersion=${{ github.sha }}\" -X \"main.BuildDate=$(date -u '+%Y-%m-%d %H:%M:%S')\"" -o bin/DANP-MCP-SERVER-${{ matrix.platform }} ./cmd/DANP-MCP-SERVER
        else
          GOOS=${{ matrix.platform }} GOARCH=amd64 go build -ldflags "-s -w -X \"main.BuildVersion=${{ github.sha }}\" -X \"main.BuildDate=$(date -u '+%Y-%m-%d %H:%M:%S')\"" -o bin/DANP-MCP-SERVER-${{ matrix.platform }}${{ matrix.platform == 'windows' && '.exe' || '' }} ./cmd/DANP-MCP-SERVER
        fi

    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: DANP-Engine-${{ matrix.platform }}
    #     path: |
    #       bin/DANP-MCP-CLIENT-${{ matrix.platform }}*
    #       bin/DANP-MCP-SERVER-${{ matrix.platform }}*
    #       bin/*.exe

  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'

    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v0.32.0/tinygo0.32.0.linux-amd64.tar.gz
        tar -xzf tinygo0.32.0.linux-amd64.tar.gz
        sudo mv tinygo /usr/local

    - name: Build WASM Modules
      run: |
        for dir in wasm-examples/*/; do
          MODULE_NAME=$(basename "$dir")
          echo "Building $MODULE_NAME"
          cd "$dir" && \
          go mod init "$MODULE_NAME" >/dev/null 2>&1 && \
          go get github.com/extism/go-pdk && \
          GOOS=wasip1 GOARCH=wasm tinygo build -o "$MODULE_NAME".wasm -target wasi -opt=z -no-debug -scheduler=none main.go
          cd -
        done
